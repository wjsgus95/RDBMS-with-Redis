# v1.2
parse_create(statement)
    return dict(
        table: str(table name)
        col_name: list(str(column names))
        col_type: list(str(column data types))
    )

parse_insert(statement)
    return dict(
        table: str(table name)
        col_val: list(str(column name + '\r' + column values))
    )

parse_select(statement)
    return dict(
        select: binary string (for count and sum, ':' is used)
        from: binary string (tables splitted by '\r')
        where: binary string if exists (for conditional operations (ex. equal, like, ...), '#' is used) else None
        group_by: byte string if exists (simple column name b'column') else None
    )

parse_update(statement)
    return dict(
        set: binary string (table name)
        update: binary string ('='->'#' when expr, '='->'\"' when DEFAULT, ','->'\r')
        where: binary string if exists (for conditional operations (ex. equal, like, ...), '#' is used) else None
    )

parse_delete(statement)
    return dict(
        from: binary string (table name)
        where: binary string if exists (for conditional operations (ex. equal, like, ...), '#' is used) else None
    )

